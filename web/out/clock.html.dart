// Auto-generated from clock.html.
// DO NOT EDIT.

library x_clock;

import 'dart:html' as autogenerated;
import 'dart:svg' as autogenerated_svg;
import 'package:web_ui/web_ui.dart' as autogenerated;
import 'package:web_ui/observe/observable.dart' as __observe;
import 'package:web_ui/web_ui.dart';
import 'dart:async';



      class Clock extends WebComponent  with Observable {
  /** Autogenerated from the template. */

  /** CSS class constants. */
  static Map<String, String> _css = {};

  /**
   * Shadow root for this component. We use 'var' to allow simulating shadow DOM
   * on browsers that don't support this feature.
   */
  var _root;
  static final __shadowTemplate = new autogenerated.DocumentFragment.html('''
      <div>
        <span></span>
      </div>
    ''');
  autogenerated.SpanElement __e2;
  autogenerated.Template __t;

  void created_autogenerated() {
    _root = createShadowRoot();
    __t = new autogenerated.Template(_root);
    _root.nodes.add(__shadowTemplate.clone(true));
    __e2 = _root.nodes[1].nodes[1];
    var __binding1 = __t.contentBind(() =>  time , false);
    __e2.nodes.addAll([new autogenerated.Text('The current time is '),
        __binding1]);
    __t.create();
  }

  void inserted_autogenerated() {
    __t.insert();
  }

  void removed_autogenerated() {
    __t.remove();
    __t = __e2 = null;
  }

  void composeChildren() {
    super.composeChildren();
    if (_root is! autogenerated.ShadowRoot) _root = this;
  }

  /** Original code from the component. */

        DateTime __$time = new DateTime.now();
        DateTime get time {
          if (__observe.observeReads) {
            __observe.notifyRead(this, __observe.ChangeRecord.FIELD, 'time');
          }
          return __$time;
        }
        set time(DateTime value) {
          if (__observe.hasObservers(this)) {
            __observe.notifyChange(this, __observe.ChangeRecord.FIELD, 'time',
                __$time, value);
          }
          __$time = value;
        }
        Timer timer;
        
        inserted() {
          timer = new Timer.repeating(new Duration(seconds:1), (_) {
            time = new DateTime.now();
          });
        }
        
        removed() {
          timer.cancel();
        }
      }
    
//@ sourceMappingURL=clock.html.dart.map